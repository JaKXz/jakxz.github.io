import{a as g,t as h}from"./disclose-version.D_6FvSZB.js";import{s as n,f as m,i as s,r as a,n as f}from"./runtime.BDXICSVk.js";import{h as t}from"./html.BtMJjPRH.js";const _={title:"TDD doesn't have to be dogmatic",date:"2023-03-06",updated:"2023-03-06",categories:["TDD","testing","dev"],coverImage:"/images/markus-spiske-8CWoXxaqGrs-unsplash.jpg",coverWidth:16,coverHeight:9,excerpt:"That's right, I said it"};var y=h(`<p>Write your tests first!
Or don’t!
It doesn’t matter.</p> <p><strong>As long as you end up incrementally improving your understanding of the problem, and confidence in your solution (i.e. end up with reliable tests) it’s successfully test-driven!</strong></p> <p>That’s it.
That’s the post.</p> <p>If you’re curious, what I usually do looks something like this (using React as pseudocode):</p> <ol><li>write out as many behaviours as I can think of in <code>.skip</code>ped or <code>.todo</code>‘d tests:</li></ol> <pre class="language-tsx"><!></pre> <ol start="2"><li>then sketch out a solution</li></ol> <pre class="language-tsx"><!></pre> <ol start="3"><li>go back to the tests and fill them out one at at time …ish:</li></ol> <pre class="language-tsx"><!></pre> <ol start="4"><li>delete the sketched solution (optional)</li> <li>write a good implementation</li></ol> <pre class="language-tsx"><!></pre> <ol start="6"><li>get feedback in a pull / merge request</li> <li>add more tests I inevitably missed</li> <li>rinse and repeat</li></ol> <p>But that’s not the right approach for every situation, and I change it up as necessary.</p> <hr> <p>This post started as a conversation with a colleague about teaching TDD, and the obstacles that may come in the way;
especially the dogmatic mindset / “strict TDD is the only TDD”.</p>`,1);function w(l){var c=y(),p=n(m(c),10),i=s(p);t(i,()=>`<code class="language-tsx"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'component'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	it<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token string">'renders this by default'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	it<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),a(p);var o=n(p,4),k=s(o);t(k,()=>`<code class="language-tsx"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>props <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span class="token plain-text">
		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),a(o);var e=n(o,4),r=s(e);t(r,()=>`<code class="language-tsx"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'renders this by default'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContainText</span><span class="token punctuation">(</span><span class="token operator">...</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'does all the other things'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),a(e);var u=n(e,4),d=s(u);t(d,()=>`<code class="language-tsx"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>i18n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">usei18n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...etc</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),a(u),f(8),g(l,c)}export{w as default,_ as metadata};
