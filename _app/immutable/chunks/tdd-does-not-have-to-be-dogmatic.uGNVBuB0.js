import{s as ft,n as Q}from"./scheduler.EloVU2S9.js";import{S as mt,i as vt,e,s as l,H as X,a as p,p as c,b as o,o as F,z as K,d as n,g as f,k as a}from"./index.3e0jgRul.js";function ht(ut){let u,U=`Write your tests first!
Or don’t!
It doesn’t matter.`,b,m,V="<strong>As long as you end up incrementally improving your understanding of the problem, and confidence in your solution (i.e. end up with reliable tests) it’s successfully test-driven!</strong>",H,v,Y=`That’s it.
That’s the post.`,L,h,Z="If you’re curious, what I usually do looks something like this (using React as pseudocode):",M,_,$="<li>write out as many behaviours as I can think of in <code>.skip</code>ped or <code>.todo</code>‘d tests:</li>",D,x,P,it=`<code class="language-tsx"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'component'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	it<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token string">'renders this by default'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	it<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,E,i,tt="<li>then sketch out a solution</li>",I,g,O,kt=`<code class="language-tsx"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>props <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span class="token plain-text">
		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,R,k,nt="<li>go back to the tests and fill them out one at at time …ish:</li>",q,y,z,rt=`<code class="language-tsx"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'renders this by default'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContainText</span><span class="token punctuation">(</span><span class="token operator">...</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'does all the other things'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,j,r,st="<li>delete the sketched solution (optional)</li> <li>write a good implementation</li>",S,C,W,dt=`<code class="language-tsx"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>i18n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">usei18n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...etc</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,A,d,at="<li>get feedback in a pull / merge request</li> <li>add more tests I inevitably missed</li> <li>rinse and repeat</li>",B,T,et="But that’s not the right approach for every situation, and I change it up as necessary.",G,J,N,w,pt=`This post started as a conversation with a colleague about teaching TDD, and the obstacles that may come in the way;
especially the dogmatic mindset / “strict TDD is the only TDD”.`;return{c(){u=e("p"),u.textContent=U,b=l(),m=e("p"),m.innerHTML=V,H=l(),v=e("p"),v.textContent=Y,L=l(),h=e("p"),h.textContent=Z,M=l(),_=e("ol"),_.innerHTML=$,D=l(),x=e("pre"),P=new X(!1),E=l(),i=e("ol"),i.innerHTML=tt,I=l(),g=e("pre"),O=new X(!1),R=l(),k=e("ol"),k.innerHTML=nt,q=l(),y=e("pre"),z=new X(!1),j=l(),r=e("ol"),r.innerHTML=st,S=l(),C=e("pre"),W=new X(!1),A=l(),d=e("ol"),d.innerHTML=at,B=l(),T=e("p"),T.textContent=et,G=l(),J=e("hr"),N=l(),w=e("p"),w.textContent=pt,this.h()},l(t){u=p(t,"P",{"data-svelte-h":!0}),c(u)!=="svelte-np8fo0"&&(u.textContent=U),b=o(t),m=p(t,"P",{"data-svelte-h":!0}),c(m)!=="svelte-1euyf0o"&&(m.innerHTML=V),H=o(t),v=p(t,"P",{"data-svelte-h":!0}),c(v)!=="svelte-r1jb0c"&&(v.textContent=Y),L=o(t),h=p(t,"P",{"data-svelte-h":!0}),c(h)!=="svelte-eelxuz"&&(h.textContent=Z),M=o(t),_=p(t,"OL",{"data-svelte-h":!0}),c(_)!=="svelte-1a3j81y"&&(_.innerHTML=$),D=o(t),x=p(t,"PRE",{class:!0});var s=F(x);P=K(s,!1),s.forEach(n),E=o(t),i=p(t,"OL",{start:!0,"data-svelte-h":!0}),c(i)!=="svelte-1rbogq9"&&(i.innerHTML=tt),I=o(t),g=p(t,"PRE",{class:!0});var lt=F(g);O=K(lt,!1),lt.forEach(n),R=o(t),k=p(t,"OL",{start:!0,"data-svelte-h":!0}),c(k)!=="svelte-u05xqs"&&(k.innerHTML=nt),q=o(t),y=p(t,"PRE",{class:!0});var ot=F(y);z=K(ot,!1),ot.forEach(n),j=o(t),r=p(t,"OL",{start:!0,"data-svelte-h":!0}),c(r)!=="svelte-s3t9hh"&&(r.innerHTML=st),S=o(t),C=p(t,"PRE",{class:!0});var ct=F(C);W=K(ct,!1),ct.forEach(n),A=o(t),d=p(t,"OL",{start:!0,"data-svelte-h":!0}),c(d)!=="svelte-6nzenz"&&(d.innerHTML=at),B=o(t),T=p(t,"P",{"data-svelte-h":!0}),c(T)!=="svelte-1sdu4l7"&&(T.textContent=et),G=o(t),J=p(t,"HR",{}),N=o(t),w=p(t,"P",{"data-svelte-h":!0}),c(w)!=="svelte-1n1p1dp"&&(w.textContent=pt),this.h()},h(){P.a=null,f(x,"class","language-tsx"),f(i,"start","2"),O.a=null,f(g,"class","language-tsx"),f(k,"start","3"),z.a=null,f(y,"class","language-tsx"),f(r,"start","4"),W.a=null,f(C,"class","language-tsx"),f(d,"start","6")},m(t,s){a(t,u,s),a(t,b,s),a(t,m,s),a(t,H,s),a(t,v,s),a(t,L,s),a(t,h,s),a(t,M,s),a(t,_,s),a(t,D,s),a(t,x,s),P.m(it,x),a(t,E,s),a(t,i,s),a(t,I,s),a(t,g,s),O.m(kt,g),a(t,R,s),a(t,k,s),a(t,q,s),a(t,y,s),z.m(rt,y),a(t,j,s),a(t,r,s),a(t,S,s),a(t,C,s),W.m(dt,C),a(t,A,s),a(t,d,s),a(t,B,s),a(t,T,s),a(t,G,s),a(t,J,s),a(t,N,s),a(t,w,s)},p:Q,i:Q,o:Q,d(t){t&&(n(u),n(b),n(m),n(H),n(v),n(L),n(h),n(M),n(_),n(D),n(x),n(E),n(i),n(I),n(g),n(R),n(k),n(q),n(y),n(j),n(r),n(S),n(C),n(A),n(d),n(B),n(T),n(G),n(J),n(N),n(w))}}}const gt={title:"TDD doesn't have to be dogmatic",date:"2023-03-06",updated:"2023-03-06",categories:["TDD","testing","dev"],coverImage:"/images/markus-spiske-8CWoXxaqGrs-unsplash.jpg",coverWidth:16,coverHeight:9,excerpt:"That's right, I said it"};class yt extends mt{constructor(u){super(),vt(this,u,null,ht,ft,{})}}export{yt as default,gt as metadata};
