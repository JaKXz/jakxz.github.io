import{s as cn,n as G}from"./scheduler.dd28e2fa.js";import{S as un,i as kn,g as e,s as o,h as p,A as c,c as l,j as B,f as t,k as f,a}from"./index.1c1ead50.js";function rn(nn){let u,J=`Write your tests first!
Or don’t!
It doesn’t matter.`,H,v,N="<strong>As long as you end up incrementally improving your understanding of the problem, and confidence in your solution (i.e. end up with reliable tests) it’s successfully test-driven!</strong>",M,h,X=`That’s it.
That’s the post.`,w,m,F="If you’re curious, what I usually do looks something like this (using React as pseudocode):",b,x,K="<li>write out as many behaviours as I can think of in <code>.skip</code>ped or <code>.todo</code>‘d tests:</li>",D,_,tn=`<code class="language-tsx"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'component'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	it<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token string">'renders this by default'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	it<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,P,i,Q="<li>then sketch out a solution</li>",E,g,sn=`<code class="language-tsx"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>props <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span class="token plain-text">
		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,I,k,U="<li>go back to the tests and fill them out one at at time …ish:</li>",O,y,an=`<code class="language-tsx"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'renders this by default'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContainText</span><span class="token punctuation">(</span><span class="token operator">...</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'does all the other things'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,R,r,V="<li>delete the sketched solution (optional)</li> <li>write a good implementation</li>",q,T,en=`<code class="language-tsx"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>i18n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">usei18n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...etc</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,j,d,Y="<li>get feedback in a pull / merge request</li> <li>add more tests I inevitably missed</li> <li>rinse and repeat</li>",z,C,Z="But that’s not the right approach for every situation, and I change it up as necessary.",S,W,A,L,$=`This post started as a conversation with a colleague about teaching TDD, and the obstacles that may come in the way;
especially the dogmatic mindset / “strict TDD is the only TDD”.`;return{c(){u=e("p"),u.textContent=J,H=o(),v=e("p"),v.innerHTML=N,M=o(),h=e("p"),h.textContent=X,w=o(),m=e("p"),m.textContent=F,b=o(),x=e("ol"),x.innerHTML=K,D=o(),_=e("pre"),P=o(),i=e("ol"),i.innerHTML=Q,E=o(),g=e("pre"),I=o(),k=e("ol"),k.innerHTML=U,O=o(),y=e("pre"),R=o(),r=e("ol"),r.innerHTML=V,q=o(),T=e("pre"),j=o(),d=e("ol"),d.innerHTML=Y,z=o(),C=e("p"),C.textContent=Z,S=o(),W=e("hr"),A=o(),L=e("p"),L.textContent=$,this.h()},l(n){u=p(n,"P",{["data-svelte-h"]:!0}),c(u)!=="svelte-np8fo0"&&(u.textContent=J),H=l(n),v=p(n,"P",{["data-svelte-h"]:!0}),c(v)!=="svelte-1euyf0o"&&(v.innerHTML=N),M=l(n),h=p(n,"P",{["data-svelte-h"]:!0}),c(h)!=="svelte-r1jb0c"&&(h.textContent=X),w=l(n),m=p(n,"P",{["data-svelte-h"]:!0}),c(m)!=="svelte-eelxuz"&&(m.textContent=F),b=l(n),x=p(n,"OL",{["data-svelte-h"]:!0}),c(x)!=="svelte-1a3j81y"&&(x.innerHTML=K),D=l(n),_=p(n,"PRE",{class:!0});var s=B(_);s.forEach(t),P=l(n),i=p(n,"OL",{start:!0,["data-svelte-h"]:!0}),c(i)!=="svelte-1rbogq9"&&(i.innerHTML=Q),E=l(n),g=p(n,"PRE",{class:!0});var pn=B(g);pn.forEach(t),I=l(n),k=p(n,"OL",{start:!0,["data-svelte-h"]:!0}),c(k)!=="svelte-u05xqs"&&(k.innerHTML=U),O=l(n),y=p(n,"PRE",{class:!0});var on=B(y);on.forEach(t),R=l(n),r=p(n,"OL",{start:!0,["data-svelte-h"]:!0}),c(r)!=="svelte-s3t9hh"&&(r.innerHTML=V),q=l(n),T=p(n,"PRE",{class:!0});var ln=B(T);ln.forEach(t),j=l(n),d=p(n,"OL",{start:!0,["data-svelte-h"]:!0}),c(d)!=="svelte-6nzenz"&&(d.innerHTML=Y),z=l(n),C=p(n,"P",{["data-svelte-h"]:!0}),c(C)!=="svelte-1sdu4l7"&&(C.textContent=Z),S=l(n),W=p(n,"HR",{}),A=l(n),L=p(n,"P",{["data-svelte-h"]:!0}),c(L)!=="svelte-1n1p1dp"&&(L.textContent=$),this.h()},h(){f(_,"class","language-tsx"),f(i,"start","2"),f(g,"class","language-tsx"),f(k,"start","3"),f(y,"class","language-tsx"),f(r,"start","4"),f(T,"class","language-tsx"),f(d,"start","6")},m(n,s){a(n,u,s),a(n,H,s),a(n,v,s),a(n,M,s),a(n,h,s),a(n,w,s),a(n,m,s),a(n,b,s),a(n,x,s),a(n,D,s),a(n,_,s),_.innerHTML=tn,a(n,P,s),a(n,i,s),a(n,E,s),a(n,g,s),g.innerHTML=sn,a(n,I,s),a(n,k,s),a(n,O,s),a(n,y,s),y.innerHTML=an,a(n,R,s),a(n,r,s),a(n,q,s),a(n,T,s),T.innerHTML=en,a(n,j,s),a(n,d,s),a(n,z,s),a(n,C,s),a(n,S,s),a(n,W,s),a(n,A,s),a(n,L,s)},p:G,i:G,o:G,d(n){n&&(t(u),t(H),t(v),t(M),t(h),t(w),t(m),t(b),t(x),t(D),t(_),t(P),t(i),t(E),t(g),t(I),t(k),t(O),t(y),t(R),t(r),t(q),t(T),t(j),t(d),t(z),t(C),t(S),t(W),t(A),t(L))}}}const vn={title:"TDD doesn't have to be dogmatic",date:"2023-03-06",updated:"2023-03-06",categories:["TDD","testing","dev"],coverImage:"/images/markus-spiske-8CWoXxaqGrs-unsplash.jpg",coverWidth:16,coverHeight:9,excerpt:"That's right, I said it"};class hn extends un{constructor(u){super(),kn(this,u,null,rn,cn,{})}}export{hn as default,vn as metadata};
